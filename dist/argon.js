;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Argon, exports;

Argon = {};

Argon.Observable = require('./observable');

Argon.Renderer = require('./renderer');

Argon.Route = require('./route');

Argon.View = require('./view');

Argon.Socket = require('./client/socket');

Argon.ClientModel = require('./client/model');

Argon.Model = Argon.ClientModel;

exports = module.exports = Argon;

if (typeof window !== "undefined" && window !== null) {
  window.Argon = exports;
}

/*
//@ sourceMappingURL=argon.map
*/

},{"./client/model":2,"./client/socket":3,"./observable":5,"./renderer":6,"./route":7,"./view":8}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AbstractModel, ClientModel, SocketClient, exports, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

AbstractModel = require('../model');

SocketClient = require('./socket');

ClientModel = (function(_super) {
  var _this = this;

  __extends(ClientModel, _super);

  function ClientModel() {
    _ref = ClientModel.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ClientModel.remote = new SocketClient;

  ClientModel.remote.on('ready', function() {
    return ClientModel.emit('ready');
  });

  ClientModel.find = function(query, options, cb) {
    var _this = this;
    if (!cb) {
      cb = options;
    }
    return this.remote.call("" + this.name + ".find", [query, options], function(err, records) {
      return cb(err, records && (records.map(function(r) {
        return new _this(r);
      })) || null);
    });
  };

  ClientModel.save = function(record, cb) {
    var _this = this;
    return this.remote.call("" + this.name + ".save", [record], function(err, record) {
      return cb(err, record && (new _this(record)) || null);
    });
  };

  ClientModel.remove = function() {
    var args, cb, _i;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
    return this.remote.call("" + this.name + ".remove", args, cb);
  };

  return ClientModel;

}).call(this, AbstractModel);

exports = module.exports = ClientModel;

/*
//@ sourceMappingURL=model.map
*/

},{"../model":4,"./socket":3}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Observable, SocketClient, exports,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Observable = require('../observable');

SocketClient = (function(_super) {
  __extends(SocketClient, _super);

  SocketClient.pool = {};

  SocketClient.prototype.id = 1;

  SocketClient.prototype.queue = [];

  SocketClient.prototype.sent = {};

  function SocketClient(url) {
    var instance;
    if (typeof location !== "undefined" && location !== null) {
      if (url == null) {
        url = (location.protocol === 'https:' && 'wss://' || 'ws://') + location.host;
      }
    }
    if (instance = this.constructor.pool[url]) {
      return instance;
    }
    this.constructor.pool[url] = this;
    this.url = url;
    this.connect();
  }

  SocketClient.prototype.connect = function() {
    var _this = this;
    if (!this.connecting && (typeof WebSocket !== "undefined" && WebSocket !== null)) {
      console.log("connecting...");
      this.connecting = true;
      this.socket = new WebSocket(this.url);
      this.socket.onmessage = this.receive.bind(this);
      this.socket.onopen = function() {
        console.log('connected');
        _this.connecting = false;
        clearInterval(_this.interval);
        _this.interval = null;
        return _this.flush();
      };
      return this.socket.onclose = function() {
        console.log('closed');
        _this.connecting = false;
        if (!_this.interval) {
          return _this.interval = setInterval(_this.connect.bind(_this), 2000);
        }
      };
    }
  };

  SocketClient.prototype.call = function(method, params, cb) {
    var call, request;
    if (params == null) {
      params = [];
    }
    request = {
      method: method,
      params: params,
      id: this.id++
    };
    call = {
      request: request,
      cb: cb
    };
    this.queue.push(call);
    this.flush();
    this.timer = setTimeout(this.timeout.bind(this, call), 2000);
    return this.update();
  };

  SocketClient.prototype.flush = function() {
    var call, _results;
    _results = [];
    while (this.socket.readyState === WebSocket.OPEN && (call = this.queue.shift())) {
      console.log('remote call', call.request);
      this.socket.send(JSON.stringify(call.request));
      _results.push(this.sent[call.request.id] = call);
    }
    return _results;
  };

  SocketClient.prototype.receive = function(event) {
    var call, message, response;
    message = JSON.parse(event.data);
    if (message.id && (response = message)) {
      if (call = this.sent[response.id]) {
        console.log('response', response);
        if (response.error) {
          console.error(response.error);
        }
        delete this.sent[response.id];
        clearTimeout(this.timer);
        call.cb(response.error, response.result);
        return this.update();
      }
    } else {
      return this.emit('notify', message);
    }
  };

  SocketClient.prototype.timeout = function(call) {
    if (this.sent[call.request.id]) {
      console.log('timing out:', call.request.method);
      call.cb('timeout', null);
      delete this.sent[call.request.id];
      this.queue = this.queue.filter(function(item) {
        return item !== call;
      });
      return this.update();
    }
  };

  SocketClient.prototype.update = function() {
    var waiting,
      _this = this;
    waiting = this.queue.length || (Object.keys(this.sent)).length;
    if (!this._waiting && waiting) {
      this._waiting = new Date;
      this.emit('waiting');
      return this._waiting_timer = setTimeout(function() {
        if (_this._waiting) {
          return document.documentElement.dataset.state = 'waiting';
        }
      }, 250);
    } else if (this._waiting && !waiting) {
      console.log("waited for " + (new Date - this._waiting) + " msecs");
      this._waiting = null;
      document.documentElement.dataset.state = 'idle';
      clearTimeout(this._waiting_timer);
      return this.emit('ready');
    }
  };

  return SocketClient;

})(Observable);

exports = module.exports = SocketClient;

/*
//@ sourceMappingURL=socket.map
*/

},{"../observable":5}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var AbstractModel, Argon, Observable, exports;

Argon = require('./argon');

Observable = require('./observable');

AbstractModel = (function() {
  Observable.extend(AbstractModel);

  AbstractModel.field = function(name, opts) {
    if (opts == null) {
      opts = {};
    }
    return (this._fields != null ? this._fields : this._fields = {
      id: {}
    })[name] = opts;
  };

  AbstractModel.get = function(query, cb) {
    var _this = this;
    if (typeof query !== 'object') {
      query = {
        id: query
      };
    }
    return this.find(query, {
      limit: 1
    }, function(err, result) {
      return cb(err, result && result[0] || null);
    });
  };

  function AbstractModel(json) {
    var existing, k, v, _base;
    if (json) {
      if (json.id) {
        if ((_base = this.constructor)._identities == null) {
          _base._identities = {};
        }
        if (existing = this.constructor._identities[json.id]) {
          for (k in json) {
            v = json[k];
            existing[k] = v;
          }
          return existing;
        } else {
          this.constructor._identities[json.id] = this;
        }
      }
      for (k in json) {
        v = json[k];
        this[k] = v;
      }
    }
  }

  AbstractModel.prototype.save = function(cb) {
    return this.constructor.save(this, cb);
  };

  AbstractModel.prototype.remove = function(cb) {
    return this.constructor.remove({
      id: this.id
    }, cb);
  };

  AbstractModel.prototype.readable = function() {
    return true;
  };

  AbstractModel.prototype.writable = function() {
    return true;
  };

  AbstractModel.prototype.toJSON = function() {
    var name, record;
    record = {};
    for (name in this.constructor._fields) {
      record[name] = this[name];
    }
    return record;
  };

  return AbstractModel;

})();

exports = module.exports = AbstractModel;

/*
//@ sourceMappingURL=model.map
*/

},{"./argon":1,"./observable":5}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Observable, exports,
  __slice = [].slice;

Observable = (function() {
  function Observable() {}

  Observable.extend = function(target) {
    var prop, _results;
    _results = [];
    for (prop in this.prototype) {
      _results.push(target[prop] = this.prototype[prop]);
    }
    return _results;
  };

  Observable.prototype.on = function(event, cb, once) {
    var _base;
    ((_base = (this.observers != null ? this.observers : this.observers = {}))[event] != null ? (_base = (this.observers != null ? this.observers : this.observers = {}))[event] : _base[event] = []).push(cb);
    if (once) {
      return cb.once = true;
    }
  };

  Observable.prototype.once = function(event, cb) {
    return this.on(event, cb, true);
  };

  Observable.prototype.emit = function() {
    var args, event, _base;
    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    console.log(this.name || this.constructor.name, 'emits', event);
    if (this.observers == null) {
      this.observers = {};
    }
    if ((_base = this.observers)[event] == null) {
      _base[event] = [];
    }
    return this.observers[event] = this.observers[event].filter(function(cb) {
      cb.apply(null, args);
      return !cb.once;
    });
  };

  return Observable;

})();

exports = module.exports = Observable;

/*
//@ sourceMappingURL=observable.map
*/

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Renderer, exports,
  __slice = [].slice;

Renderer = (function() {
  Renderer.prototype.stack = [];

  Renderer.prototype.push = function(context) {
    return this.stack.unshift(context);
  };

  Renderer.prototype.pop = function() {
    return this.stack.shift();
  };

  Renderer.prototype.get = function(key) {
    var context, obj, _i, _len, _ref;
    _ref = this.stack;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      context = _ref[_i];
      obj = context[key];
      if (typeof obj !== 'undefined') {
        return typeof obj === 'function' && (obj.bind(context)) || obj;
      }
    }
    return console.log('not found from stack', key, this.stack);
  };

  Renderer.prototype.resolve = function(keypath) {
    var key, obj, parent, path, _i, _len;
    if (path = keypath.split('.')) {
      obj = this.get(path.shift());
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        key = path[_i];
        if (!(obj != null)) {
          continue;
        }
        parent = obj;
        obj = obj[key];
      }
      if (obj == null) {
        console.log("cannot resolve keypath " + keypath);
      }
      return typeof obj === 'function' && (parent && obj.bind(parent)) || obj;
    }
  };

  Renderer.prototype.molds = [];

  function Renderer(node, context) {
    var args, attr, bool, cb, child, clone, cls, handler, item, iterables, keypath, mold, name, navigate, obj, params, path, result, route, value, viewpath, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
      _this = this;
    if (context) {
      this.push(context);
    }
    if (node.nodeType === window.Node.ELEMENT_NODE) {
      attr = node.attributes;
      if (value = (_ref = attr['data-if']) != null ? _ref.value : void 0) {
        if (!this.resolve(value)) {
          this.molds.push(node);
          return;
        }
      }
      if (value = (_ref1 = attr['data-unless']) != null ? _ref1.value : void 0) {
        if (this.resolve(value)) {
          this.molds.push(node);
          return;
        }
      }
      if (value = (_ref2 = attr['data-each']) != null ? _ref2.value : void 0) {
        _ref3 = value.split(' '), iterables = _ref3[0], item = _ref3[1];
        _ref4 = (this.resolve(iterables)) || [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          obj = _ref4[_i];
          node.removeAttribute('data-each');
          node.parentNode.insertBefore(clone = node.cloneNode(true));
          context = {};
          context[item] = obj;
          this.constructor(clone, context);
        }
        this.molds.push(node);
        return;
      }
      if (value = (_ref5 = attr['data-attr']) != null ? _ref5.value : void 0) {
        _ref6 = value.split(' '), attr = _ref6[0], keypath = _ref6[1];
        node.setAttribute(attr, (_ref7 = this.resolve(keypath)) != null ? _ref7 : '');
      }
      if (value = (_ref8 = attr['data-style']) != null ? _ref8.value : void 0) {
        _ref9 = value.split(', ');
        for (_j = 0, _len1 = _ref9.length; _j < _len1; _j++) {
          item = _ref9[_j];
          _ref10 = item.split(' '), attr = _ref10[0], keypath = _ref10[1];
          node.style[attr] = this.resolve(keypath != null ? keypath : '');
        }
      }
      if (value = (_ref11 = attr['data-class']) != null ? _ref11.value : void 0) {
        _ref12 = value.split(', ');
        for (_k = 0, _len2 = _ref12.length; _k < _len2; _k++) {
          item = _ref12[_k];
          _ref13 = item.split(' '), cls = _ref13[0], keypath = _ref13[1];
          if (!keypath) {
            result = this.resolve(cls);
            if (result instanceof Array) {
              for (_l = 0, _len3 = result.length; _l < _len3; _l++) {
                cls = result[_l];
                node.classList.add(cls);
              }
            } else if (typeof result === 'object') {
              for (cls in result) {
                bool = result[cls];
                node.classList[bool && 'add' || 'remove'](cls);
              }
            } else {
              node.classList.add(result);
            }
          } else {
            node.classList[(this.resolve(keypath)) && 'add' || 'remove'](cls);
          }
        }
      }
      if (value = (_ref14 = attr['data-route']) != null ? _ref14.value : void 0) {
        _ref15 = value.split(' '), viewpath = _ref15[0], params = 2 <= _ref15.length ? __slice.call(_ref15, 1) : [];
        params = params.map(this.resolve.bind(this));
        route = this.resolve(viewpath);
        path = route.reverse(params);
        navigate = this.get('navigate');
        node.addEventListener('click', function(event) {
          event.preventDefault();
          return navigate(path);
        }, true);
        if (node.tagName === 'A') {
          node.setAttribute('href', path);
        }
      }
      if (value = (_ref16 = attr['data-event']) != null ? _ref16.value : void 0) {
        _ref17 = value.split(' '), name = _ref17[0], keypath = _ref17[1], args = 3 <= _ref17.length ? __slice.call(_ref17, 2) : [];
        args = args.map(function(arg) {
          return _this.resolve(arg);
        });
        handler = this.resolve(keypath);
        cb = function(event) {
          var data, form, _len4, _m, _ref18;
          if (name === 'submit') {
            event.preventDefault();
            form = event.target;
            data = {};
            _ref18 = form.elements;
            for (_m = 0, _len4 = _ref18.length; _m < _len4; _m++) {
              node = _ref18[_m];
              if (node.name) {
                data[node.name] = node.value;
              }
            }
            return handler.apply(null, [data].concat(__slice.call(args), [event]));
          } else {
            return handler.apply(null, __slice.call(args).concat([event]));
          }
        };
        node.addEventListener(name, cb, true);
      }
      if (keypath = (_ref18 = attr['data-text']) != null ? _ref18.value : void 0) {
        node.textContent = (_ref19 = this.resolve(keypath)) != null ? _ref19 : '';
      } else if (keypath = (_ref20 = attr['data-html']) != null ? _ref20.value : void 0) {
        node.innerHTML = (_ref21 = this.resolve(keypath)) != null ? _ref21 : '';
      } else {
        _ref22 = node.childNodes;
        for (_m = 0, _len4 = _ref22.length; _m < _len4; _m++) {
          child = _ref22[_m];
          this.constructor(child);
        }
      }
    }
    if (context) {
      this.pop();
    }
    while (mold = this.molds.pop()) {
      mold.parentNode.removeChild(mold);
    }
  }

  return Renderer;

})();

exports = module.exports = Renderer;

/*
//@ sourceMappingURL=renderer.map
*/

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Route, exports;

Route = (function() {
  function Route(pattern, view) {
    var re_str;
    this.pattern = pattern;
    this.view = view;
    re_str = this.pattern.replace(/\?/g, '([^/]+)').replace(/\*/g, '(.*)');
    this.re = new RegExp("^" + re_str + "$");
  }

  Route.prototype.reverse = function(params) {
    return this.pattern.replace(/[\?\*]/, function() {
      return params.shift();
    });
  };

  Route.prototype.match = function(url) {
    var params;
    if (params = url.match(this.re)) {
      return params.slice(1);
    }
  };

  return Route;

})();

exports = module.exports = Route;

/*
//@ sourceMappingURL=route.map
*/

},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
var Observable, Renderer, Route, View, exports, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Route = require('./route');

Renderer = require('./renderer');

Observable = require('./observable');

View = (function(_super) {
  __extends(View, _super);

  function View() {
    _ref = View.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  View.prototype.root = '/';

  View.prototype.current = null;

  View.prototype.routes = {};

  View.prototype.user = null;

  View.route = function(pattern, options) {
    var name;
    name = (options != null ? options.as : void 0) || this.name;
    return this.prototype.routes[name] = new Route(this.prototype.root + pattern, new this);
  };

  View.prototype.start = function() {
    var _this = this;
    return window.onpopstate = function() {
      return _this.dispatch(location.pathname);
    };
  };

  View.prototype.navigate = function(path) {
    if (path !== location.pathname) {
      history.pushState(null, '', path);
    }
    return this.dispatch(path);
  };

  View.prototype.reload = function() {
    return this.dispatch(location.pathname);
  };

  View.prototype.dispatch = function(path, defer) {
    var fn, name, params, route, _ref1;
    _ref1 = this.routes;
    for (name in _ref1) {
      route = _ref1[name];
      if (params = route.match(path)) {
        this.current = route.view;
        this.emit('view');
        fn = function() {
          var _ref2;
          return (_ref2 = route.view).view.apply(_ref2, params);
        };
        return !defer && fn() || fn;
      }
    }
    throw 'add .* as last route for 404 (' + path + ')';
  };

  View.prototype.render = function(templates) {
    var into, node, source, template, _i, _len, _ref1;
    for (into in templates) {
      source = templates[into];
      template = document.querySelector("#template-" + source);
      into = document.querySelector('#' + (into || 'main'));
      while (node = into.lastChild) {
        into.removeChild(node);
      }
      if (template.content instanceof DocumentFragment) {
        into.appendChild(template.content.cloneNode(true));
      } else {
        _ref1 = template.childNodes;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          node = _ref1[_i];
          into.appendChild(node.cloneNode(true));
        }
      }
      new Renderer(into, this);
    }
    return this.emit('rendered');
  };

  (new (require('./client/socket'))).on('notify', function(message) {
    var extension, link, resource, template, throwaway, _i, _len, _ref1, _ref2, _ref3;
    if (message.namespace === 'livereload') {
      resource = message;
      extension = (_ref1 = resource.path.match(/\.[^\.]+$/)) != null ? _ref1[0] : void 0;
      if (extension === '.css') {
        link = document.querySelector("link[rel=stylesheet][href^=\"" + resource.path + "\"]");
        return link != null ? link.href = resource.path + '?' + (new Date).getTime() : void 0;
      } else if (extension === '.js') {
        return document.location.reload(false);
      } else if (extension === '.html') {
        throwaway = document.createElement('div');
        throwaway.innerHTML = resource.content;
        _ref2 = throwaway.querySelectorAll('template');
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          template = _ref2[_i];
          if ((_ref3 = document.getElementById(template.attributes.id)) != null) {
            _ref3.innerHTML = template.innerHTML;
          }
        }
        return this.constructor.prototype.current.render();
      }
    }
  });

  return View;

})(Observable);

exports = module.exports = View;

/*
//@ sourceMappingURL=view.map
*/

},{"./client/socket":3,"./observable":5,"./renderer":6,"./route":7}]},{},[1])
;