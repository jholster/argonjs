// Generated by CoffeeScript 1.6.3
var AbstractModel, MongoStorage, Observable, ServerModel, exports, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AbstractModel = require('../model');

MongoStorage = require('./mongo');

Observable = require('../observable');

ServerModel = (function(_super) {
  __extends(ServerModel, _super);

  function ServerModel() {
    _ref = ServerModel.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ServerModel.storage = new MongoStorage('carbon');

  Observable.extend(ServerModel);

  ServerModel._waiting = 0;

  ServerModel.wait = function() {
    return ServerModel._waiting++;
  };

  ServerModel.ready = function() {
    if (--ServerModel._waiting === 0) {
      return ServerModel.emit('ready');
    }
  };

  ServerModel.find = function(query, options, cb) {
    var _this = this;
    console.log(this.__super__.constructor.name);
    console.log(this.name);
    if (!cb) {
      cb = options;
    }
    this.wait();
    return this.storage.find(this.name, query, options, function(err, records) {
      if (records) {
        records = records.map(function(json) {
          return new _this(json);
        });
        records = records.filter(function(r) {
          return r.readable();
        });
      }
      cb(err, records);
      return _this.ready();
    });
  };

  ServerModel.save = function(record, cb) {
    var data, field,
      _this = this;
    this.wait();
    if (!(record instanceof this)) {
      record = new this(record);
    }
    if (record.writable()) {
      data = {};
      for (field in this._fields) {
        data[field] = record[field];
      }
      return this.storage.save(this.name, data, function(err, result) {
        cb(err, result && (new _this(result)) || null);
        return _this.ready();
      });
    } else {
      cb('permission error', null);
      return this.ready();
    }
  };

  ServerModel.remove = function(id, cb) {
    var _this = this;
    return this.find({
      id: id,
      limit: 1
    }, function(err, records) {
      var record;
      if (err) {
        return cb(err);
      }
      if (records && (record = records[0]) && record.writable()) {
        return _this.storage.remove(_this.name, {
          id: record.id
        }, function() {
          cb.apply(null, arguments);
          return _this.ready();
        });
      } else {
        cb(null, 0);
        return _this.ready();
      }
    });
  };

  return ServerModel;

})(AbstractModel);

exports = module.exports = ServerModel;

/*
//@ sourceMappingURL=model.map
*/
