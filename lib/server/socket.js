// Generated by CoffeeScript 1.6.3
var SocketServer, exports, ws,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

ws = require('ws');

SocketServer = (function(_super) {
  __extends(SocketServer, _super);

  function SocketServer(http_server, context, authenticate) {
    this.context = context;
    SocketServer.__super__.constructor.call(this, {
      server: http_server,
      verifyClient: authenticate
    });
    this.on('connection', this.listen.bind(this));
  }

  SocketServer.prototype.listen = function(connection) {
    var user,
      _this = this;
    console.log('client connected');
    user = void 0;
    return connection.on('message', function(message) {
      var callable, reply, request;
      console.log('message received', message);
      request = JSON.parse(message);
      reply = function(error, result) {
        var response;
        response = {
          result: result,
          error: error,
          id: request.id
        };
        return connection.send(JSON.stringify(response));
      };
      if ((callable = _this.resolve(request.method)) instanceof Function) {
        return _this.invoke(callable, request.params, function(error, result) {
          if (!user && (result != null ? result.constructor.authenticate : void 0) instanceof Function) {
            user = result;
            console.log('client authenticated as', user);
          }
          console.log('sending back', error, result);
          if (request.id) {
            return reply(error, result);
          }
        });
      } else {
        return reply("invalid method: " + request.method, null);
      }
    });
  };

  SocketServer.prototype.resolve = function(keypath) {
    var key, obj, parent, type_err, _i, _len;
    if (typeof keypath === 'string') {
      keypath = keypath.split('.');
    }
    obj = this.context;
    try {
      for (_i = 0, _len = keypath.length; _i < _len; _i++) {
        key = keypath[_i];
        parent = obj;
        obj = obj[key];
      }
      return obj.bind(parent);
    } catch (_error) {
      type_err = _error;
      console.log("failed to resolve " + keypath + " from " + this.context);
      return null;
    }
  };

  SocketServer.prototype.invoke = function(callable, params, cb) {
    var err, ret;
    try {
      if (callable.length > params.length) {
        return callable.apply(null, __slice.call(params).concat([cb]));
      } else {
        console.log("WARNING: invoking synchronous callable");
        ret = callable.apply(null, params);
        return cb(null, [ret]);
      }
    } catch (_error) {
      err = _error;
      return cb(err.message, null);
    }
  };

  SocketServer.prototype.broadcast = function(notify) {
    var client, _i, _len, _ref, _results;
    _ref = this.clients;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      client = _ref[_i];
      _results.push(client.send(JSON.stringify(notify)));
    }
    return _results;
  };

  return SocketServer;

})(ws.Server);

exports = module.exports = SocketServer;

/*
//@ sourceMappingURL=socket.map
*/
