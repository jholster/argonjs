// Generated by CoffeeScript 1.6.3
var MongoStorage, Storage, exports,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Storage = require('./storage');

MongoStorage = (function(_super) {
  __extends(MongoStorage, _super);

  function MongoStorage(conn_str) {
    this.mongojs = require('mongojs');
    this.db = this.mongojs(conn_str);
  }

  MongoStorage.prototype.demongofy = function(doc) {
    doc.id = doc._id.toString();
    delete doc._id;
    return doc;
  };

  MongoStorage.prototype.mongofy = function(json) {
    if (json.id) {
      json._id = this.mongojs.ObjectId(json.id);
      delete json.id;
    }
    return json;
  };

  MongoStorage.prototype.find = function(model, query, options, cb) {
    var _this = this;
    if (arguments.length === 3) {
      cb = options;
    } else if (arguments.length === 2) {
      cb = query;
    }
    return this.db.collection(model).find(this.mongofy(query), function(err, result) {
      return cb(err, result.map(_this.demongofy));
    });
  };

  MongoStorage.prototype.remove = function(model, query, cb) {
    var _this = this;
    return this.db.collection(model).remove(this.mongofy(query), function(err, num) {
      return cb(err, num);
    });
  };

  MongoStorage.prototype.save = function(model, json, cb) {
    var _this = this;
    return this.db.collection(model).save(this.mongofy(json), {
      safe: true
    }, function(err, doc) {
      return cb(err, doc && _this.demongofy(doc || null));
    });
  };

  return MongoStorage;

})(Storage);

exports = module.exports = MongoStorage;

/*
//@ sourceMappingURL=mongo.map
*/
