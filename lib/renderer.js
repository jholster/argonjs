// Generated by CoffeeScript 1.6.3
var Renderer, exports,
  __slice = [].slice;

Renderer = (function() {
  Renderer.prototype.stack = [];

  Renderer.prototype.push = function(context) {
    return this.stack.unshift(context);
  };

  Renderer.prototype.pop = function() {
    return this.stack.shift();
  };

  Renderer.prototype.get = function(key) {
    var context, obj, _i, _len, _ref;
    _ref = this.stack;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      context = _ref[_i];
      obj = context[key];
      if (typeof obj !== 'undefined') {
        return typeof obj === 'function' && (obj.bind(context)) || obj;
      }
    }
    return console.log('not found from stack', key, this.stack);
  };

  Renderer.prototype.resolve = function(keypath) {
    var key, obj, parent, path, _i, _len;
    if (path = keypath.split('.')) {
      obj = this.get(path.shift());
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        key = path[_i];
        if (!(obj != null)) {
          continue;
        }
        parent = obj;
        obj = obj[key];
      }
      if (obj == null) {
        console.log("cannot resolve keypath " + keypath);
      }
      return typeof obj === 'function' && (parent && obj.bind(parent)) || obj;
    }
  };

  Renderer.prototype.molds = [];

  function Renderer(node, context) {
    var args, attr, bool, cb, child, clone, cls, handler, item, iterables, keypath, mold, name, navigate, obj, params, path, result, route, value, viewpath, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
      _this = this;
    if (context) {
      this.push(context);
    }
    if (node.nodeType === window.Node.ELEMENT_NODE) {
      attr = node.attributes;
      if (value = (_ref = attr['data-if']) != null ? _ref.value : void 0) {
        if (!this.resolve(value)) {
          this.molds.push(node);
          return;
        }
      }
      if (value = (_ref1 = attr['data-unless']) != null ? _ref1.value : void 0) {
        if (this.resolve(value)) {
          this.molds.push(node);
          return;
        }
      }
      if (value = (_ref2 = attr['data-each']) != null ? _ref2.value : void 0) {
        _ref3 = value.split(' '), iterables = _ref3[0], item = _ref3[1];
        _ref4 = (this.resolve(iterables)) || [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          obj = _ref4[_i];
          node.removeAttribute('data-each');
          node.parentNode.insertBefore(clone = node.cloneNode(true));
          context = {};
          context[item] = obj;
          this.constructor(clone, context);
        }
        this.molds.push(node);
        return;
      }
      if (value = (_ref5 = attr['data-attr']) != null ? _ref5.value : void 0) {
        _ref6 = value.split(' '), attr = _ref6[0], keypath = _ref6[1];
        node.setAttribute(attr, (_ref7 = this.resolve(keypath)) != null ? _ref7 : '');
      }
      if (value = (_ref8 = attr['data-style']) != null ? _ref8.value : void 0) {
        _ref9 = value.split(', ');
        for (_j = 0, _len1 = _ref9.length; _j < _len1; _j++) {
          item = _ref9[_j];
          _ref10 = item.split(' '), attr = _ref10[0], keypath = _ref10[1];
          node.style[attr] = this.resolve(keypath != null ? keypath : '');
        }
      }
      if (value = (_ref11 = attr['data-class']) != null ? _ref11.value : void 0) {
        _ref12 = value.split(', ');
        for (_k = 0, _len2 = _ref12.length; _k < _len2; _k++) {
          item = _ref12[_k];
          _ref13 = item.split(' '), cls = _ref13[0], keypath = _ref13[1];
          if (!keypath) {
            result = this.resolve(cls);
            if (result instanceof Array) {
              for (_l = 0, _len3 = result.length; _l < _len3; _l++) {
                cls = result[_l];
                node.classList.add(cls);
              }
            } else if (typeof result === 'object') {
              for (cls in result) {
                bool = result[cls];
                node.classList[bool && 'add' || 'remove'](cls);
              }
            } else {
              node.classList.add(result);
            }
          } else {
            node.classList[(this.resolve(keypath)) && 'add' || 'remove'](cls);
          }
        }
      }
      if (value = (_ref14 = attr['data-route']) != null ? _ref14.value : void 0) {
        _ref15 = value.split(' '), viewpath = _ref15[0], params = 2 <= _ref15.length ? __slice.call(_ref15, 1) : [];
        params = params.map(this.resolve.bind(this));
        route = this.resolve(viewpath);
        path = route.reverse(params);
        navigate = this.get('navigate');
        node.addEventListener('click', function(event) {
          event.preventDefault();
          return navigate(path);
        }, true);
        if (node.tagName === 'A') {
          node.setAttribute('href', path);
        }
      }
      if (value = (_ref16 = attr['data-event']) != null ? _ref16.value : void 0) {
        _ref17 = value.split(' '), name = _ref17[0], keypath = _ref17[1], args = 3 <= _ref17.length ? __slice.call(_ref17, 2) : [];
        args = args.map(function(arg) {
          return _this.resolve(arg);
        });
        handler = this.resolve(keypath);
        cb = function(event) {
          var data, form, _len4, _m, _ref18;
          if (name === 'submit') {
            event.preventDefault();
            form = event.target;
            data = {};
            _ref18 = form.elements;
            for (_m = 0, _len4 = _ref18.length; _m < _len4; _m++) {
              node = _ref18[_m];
              if (node.name) {
                data[node.name] = node.value;
              }
            }
            return handler.apply(null, [data].concat(__slice.call(args), [event]));
          } else {
            return handler.apply(null, __slice.call(args).concat([event]));
          }
        };
        node.addEventListener(name, cb, true);
      }
      if (keypath = (_ref18 = attr['data-text']) != null ? _ref18.value : void 0) {
        node.textContent = (_ref19 = this.resolve(keypath)) != null ? _ref19 : '';
      } else if (keypath = (_ref20 = attr['data-html']) != null ? _ref20.value : void 0) {
        node.innerHTML = (_ref21 = this.resolve(keypath)) != null ? _ref21 : '';
      } else {
        _ref22 = node.childNodes;
        for (_m = 0, _len4 = _ref22.length; _m < _len4; _m++) {
          child = _ref22[_m];
          this.constructor(child);
        }
      }
    }
    if (context) {
      this.pop();
    }
    while (mold = this.molds.pop()) {
      mold.parentNode.removeChild(mold);
    }
  }

  return Renderer;

})();

exports = module.exports = Renderer;

/*
//@ sourceMappingURL=renderer.map
*/
