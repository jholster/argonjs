// Generated by CoffeeScript 1.6.3
var Observable, exports,
  __slice = [].slice;

Observable = (function() {
  function Observable() {}

  Observable.extend = function(target) {
    var prop, _results;
    _results = [];
    for (prop in this.prototype) {
      _results.push(target[prop] = this.prototype[prop]);
    }
    return _results;
  };

  Observable.prototype.on = function(event, cb, once) {
    var _base;
    ((_base = (this.observers != null ? this.observers : this.observers = {}))[event] != null ? (_base = (this.observers != null ? this.observers : this.observers = {}))[event] : _base[event] = []).push(cb);
    if (once) {
      return cb.once = true;
    }
  };

  Observable.prototype.once = function(event, cb) {
    return this.on(event, cb, true);
  };

  Observable.prototype.emit = function() {
    var args, event, _base;
    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    console.log(this.name || this.constructor.name, 'emits', event);
    if (this.observers == null) {
      this.observers = {};
    }
    if ((_base = this.observers)[event] == null) {
      _base[event] = [];
    }
    return this.observers[event] = this.observers[event].filter(function(cb) {
      cb.apply(null, args);
      return !cb.once;
    });
  };

  return Observable;

})();

exports = module.exports = Observable;

/*
//@ sourceMappingURL=observable.map
*/
