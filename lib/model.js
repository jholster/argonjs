// Generated by CoffeeScript 1.6.3
var AbstractModel, Argon, Observable, exports;

Argon = require('./argon');

Observable = require('./observable');

AbstractModel = (function() {
  Observable.extend(AbstractModel);

  AbstractModel.field = function(name, opts) {
    if (opts == null) {
      opts = {};
    }
    return (this._fields != null ? this._fields : this._fields = {
      id: {}
    })[name] = opts;
  };

  AbstractModel.get = function(query, cb) {
    var _this = this;
    if (typeof query !== 'object') {
      query = {
        id: query
      };
    }
    return this.find(query, {
      limit: 1
    }, function(err, result) {
      return cb(err, result && result[0] || null);
    });
  };

  function AbstractModel(json) {
    var existing, k, v, _base;
    if (json) {
      if (json.id) {
        if ((_base = this.constructor)._identities == null) {
          _base._identities = {};
        }
        if (existing = this.constructor._identities[json.id]) {
          for (k in json) {
            v = json[k];
            existing[k] = v;
          }
          return existing;
        } else {
          this.constructor._identities[json.id] = this;
        }
      }
      for (k in json) {
        v = json[k];
        this[k] = v;
      }
    }
  }

  AbstractModel.prototype.save = function(cb) {
    return this.constructor.save(this, cb);
  };

  AbstractModel.prototype.remove = function(cb) {
    return this.constructor.remove({
      id: this.id
    }, cb);
  };

  AbstractModel.prototype.readable = function() {
    return true;
  };

  AbstractModel.prototype.writable = function() {
    return true;
  };

  AbstractModel.prototype.toJSON = function() {
    var name, record;
    record = {};
    for (name in this.constructor._fields) {
      record[name] = this[name];
    }
    return record;
  };

  return AbstractModel;

})();

exports = module.exports = AbstractModel;

/*
//@ sourceMappingURL=model.map
*/
