// Generated by CoffeeScript 1.6.3
var Observable, Renderer, Route, View, exports, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Route = require('./route');

Renderer = require('./renderer');

Observable = require('./observable');

View = (function(_super) {
  __extends(View, _super);

  function View() {
    _ref = View.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  View.prototype.root = '/';

  View.prototype.current = null;

  View.prototype.routes = {};

  View.prototype.user = null;

  View.route = function(pattern, options) {
    var name;
    name = (options != null ? options.as : void 0) || this.name;
    return this.prototype.routes[name] = new Route(this.prototype.root + pattern, new this);
  };

  View.prototype.start = function() {
    var _this = this;
    return window.onpopstate = function() {
      return _this.dispatch(location.pathname);
    };
  };

  View.prototype.navigate = function(path) {
    if (path !== location.pathname) {
      history.pushState(null, '', path);
    }
    return this.dispatch(path);
  };

  View.prototype.reload = function() {
    return this.dispatch(location.pathname);
  };

  View.prototype.dispatch = function(path, defer) {
    var fn, name, params, route, _ref1;
    _ref1 = this.routes;
    for (name in _ref1) {
      route = _ref1[name];
      if (params = route.match(path)) {
        this.current = route.view;
        this.emit('view');
        fn = function() {
          var _ref2;
          return (_ref2 = route.view).view.apply(_ref2, params);
        };
        return !defer && fn() || fn;
      }
    }
    throw 'add .* as last route for 404 (' + path + ')';
  };

  View.prototype.render = function(templates) {
    var into, node, source, template, _i, _len, _ref1;
    for (into in templates) {
      source = templates[into];
      template = document.querySelector("#template-" + source);
      into = document.querySelector('#' + (into || 'main'));
      while (node = into.lastChild) {
        into.removeChild(node);
      }
      if (template.content instanceof DocumentFragment) {
        into.appendChild(template.content.cloneNode(true));
      } else {
        _ref1 = template.childNodes;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          node = _ref1[_i];
          into.appendChild(node.cloneNode(true));
        }
      }
      new Renderer(into, this);
    }
    return this.emit('rendered');
  };

  (new (require('./client/socket'))).on('notify', function(message) {
    var extension, link, resource, template, throwaway, _i, _len, _ref1, _ref2, _ref3;
    if (message.namespace === 'livereload') {
      resource = message;
      extension = (_ref1 = resource.path.match(/\.[^\.]+$/)) != null ? _ref1[0] : void 0;
      if (extension === '.css') {
        link = document.querySelector("link[rel=stylesheet][href^=\"" + resource.path + "\"]");
        return link != null ? link.href = resource.path + '?' + (new Date).getTime() : void 0;
      } else if (extension === '.js') {
        return document.location.reload(false);
      } else if (extension === '.html') {
        throwaway = document.createElement('div');
        throwaway.innerHTML = resource.content;
        _ref2 = throwaway.querySelectorAll('template');
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          template = _ref2[_i];
          if ((_ref3 = document.getElementById(template.attributes.id)) != null) {
            _ref3.innerHTML = template.innerHTML;
          }
        }
        return this.constructor.prototype.current.render();
      }
    }
  });

  return View;

})(Observable);

exports = module.exports = View;

/*
//@ sourceMappingURL=view.map
*/
